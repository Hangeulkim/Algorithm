#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int par[101];

bool cmp(vector<int>& a, vector<int>& b){
    if(a[2]==b[2]){
        if(a[0]==b[0])
            return a[1]<b[1];
        return a[0]<b[0];
    }
    return a[2]<b[2];
}

int getp(int x){
    if(par[x]==x)
        return x;
    return par[x]=getp(par[x]);
}

void unionp(int a, int b){
    a = getp(a);
    b = getp(b);
    if(a<b) par[b]=a;
    else par[a]=b;
}

bool findp(int a, int b){
    a = getp(a);
    b = getp(b);
    return a==b;
}

int solution(int n, vector<vector<int>> costs) {
    int answer = 0;
    
    sort(costs.begin(),costs.end(),cmp);
    
    for(int i=0;i<n;i++)
        par[i]=i;
    
    for(int i=0;i<costs.size();i++){
        if(!findp(costs[i][0],costs[i][1])){
            answer+=costs[i][2];
            unionp(costs[i][0],costs[i][1]);
        }
    }
    
    return answer;
}